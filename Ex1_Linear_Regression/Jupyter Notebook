{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use the normal equation to calculate the theta values\n",
    "def linear_regression_normal(X, y): \n",
    "    #X = addIntercept(X)\n",
    "    invert = np.linalg.pinv(np.dot(X.T, X))\n",
    "    return np.dot(np.dot(invert, X.T), y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use gradient descent to calculate the theta values \n",
    "def linear_regression_gradient(X, y, alpha = 0.01, reps = 100):\n",
    "    X = addIntercept(X)\n",
    "    theta = np.zeros([X.shape[1], 1])\n",
    "    m = np.shape(X)[0]\n",
    "    for each in range(reps):\n",
    "        temp = np.dot(X, theta) - y\n",
    "        temp = np.dot(X.T, temp)\n",
    "        theta = theta - (alpha/m) * temp\n",
    "        cost = np.sum((np.dot(X, theta) - y) ** 2) / (2*m)\n",
    "    return theta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compute the cost given theta values\n",
    "def compute_cost(X, y, theta):\n",
    "    X = addIntercept(X)\n",
    "    m = X.shape[0]\n",
    "    return np.sum(np.power((np.dot(X, theta) - y), 2)) / (2*m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize X features (before adding intercept)\n",
    "def featureNormalize(X):\n",
    "    mu = np.mean(X, axis = 0)\n",
    "    sigma = np.std(X, axis = 0)\n",
    "    X = (X - mu) / sigma\n",
    "    return X "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add intercept to X values\n",
    "def addIntercept(X):\n",
    "    m = X.shape[0]\n",
    "    ones = np.ones((m,1))\n",
    "    X = np.hstack((ones, X))\n",
    "    return X "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinearRegression():\n",
    "    def __init__(self):\n",
    "        self.costs = []\n",
    "    \n",
    "    def addIntercept(self, X):\n",
    "        m = X.shape[0]\n",
    "        ones = np.ones((m,1))\n",
    "        X = np.hstack((ones, X))\n",
    "        return X \n",
    "    \n",
    "    def normalize(self, X): \n",
    "        m = np.shape(X)[0]\n",
    "        cost = (X - np.mean(X, axis = 0))/np.std(X, axis = 0)\n",
    "        return cost \n",
    "    \n",
    "    def compute_cost(self, X, y, theta):\n",
    "        X = self.addIntercept(X)\n",
    "        cost = np.sum((np.dot(X, theta) - y) ** 2) / (2*m)\n",
    "        return cost\n",
    "    \n",
    "    def normal(self, X, y):\n",
    "        X = self.normalize(X)\n",
    "        X = self.addIntercept(X)\n",
    "        invert = np.linalg.pinv(np.dot(X.T, X))\n",
    "        return np.dot(np.dot(invert, X.T), y)\n",
    "    \n",
    "    def gradient_descent(self, X, y, alpha = 0.01, iters = 100):\n",
    "        X = self.normalize(X)\n",
    "        X = self.addIntercept(X)\n",
    "        theta = np.zeros([X.shape[1], 1])\n",
    "        m = np.shape(X)[0]\n",
    "        for each in range(iters):\n",
    "            temp = np.dot(X, theta) - y\n",
    "            temp = np.dot(X.T, temp)\n",
    "            theta = theta - (alpha/m) * temp\n",
    "        return theta\n",
    "    \n",
    "    def plot_gradient(self, X, y, alpha = 0.01, iters =100):\n",
    "        self.costs = []\n",
    "        X = self.normalize(X)\n",
    "        X = self.addIntercept(X)\n",
    "        theta = np.zeros([X.shape[1], 1])\n",
    "        m = np.shape(X)[0]\n",
    "        for each in range(iters):\n",
    "            temp = np.dot(X, theta) - y\n",
    "            temp = np.dot(X.T, temp)\n",
    "            theta = theta - (alpha/m) * temp\n",
    "            self.costs.append(np.sum((np.dot(X, theta) - y) ** 2) / (2*m))\n",
    "        self.costs = np.array(self.costs)\n",
    "        plt.plot(list(range(iters)), self.costs)\n",
    "        return theta\n",
    "    \n",
    "    def un_normalize(self, X, theta):\n",
    "        X = self.addIntercept(X)\n",
    "        theta = theta * np.mean(X, axis = 0)\n",
    "\n",
    "\n",
    "#Does not normalise the features    \n",
    "class SingleLinearRegression():\n",
    "    def __init__(self):\n",
    "        self.costs = []\n",
    "    \n",
    "    def addIntercept(self, X):\n",
    "        m = X.shape[0]\n",
    "        ones = np.ones((m,1))\n",
    "        X = np.hstack((ones, X))\n",
    "        return X \n",
    "    \n",
    "    def compute_cost(self, X, y, theta):\n",
    "        X = self.addIntercept(X)\n",
    "        cost = np.sum((np.dot(X, theta) - y) ** 2) / (2*m)\n",
    "        return cost\n",
    "    \n",
    "    def normal(self, X, y):\n",
    "        X = self.addIntercept(X)\n",
    "        invert = np.linalg.pinv(np.dot(X.T, X))\n",
    "        return np.dot(np.dot(invert, X.T), y)\n",
    "    \n",
    "    def gradient_descent(self, X, y, alpha = 0.01, iters = 100):\n",
    "        X = self.addIntercept(X)\n",
    "        theta = np.zeros([X.shape[1], 1])\n",
    "        m = np.shape(X)[0]\n",
    "        for each in range(iters):\n",
    "            temp = np.dot(X, theta) - y\n",
    "            temp = np.dot(X.T, temp)\n",
    "            theta = theta - (alpha/m) * temp\n",
    "        return theta\n",
    "    \n",
    "    def plot_gradient(self, X, y, alpha = 0.01, iters =100):\n",
    "        self.costs = []\n",
    "        X = self.addIntercept(X)\n",
    "        theta = np.zeros([X.shape[1], 1])\n",
    "        m = np.shape(X)[0]\n",
    "        for each in range(iters):\n",
    "            temp = np.dot(X, theta) - y\n",
    "            temp = np.dot(X.T, temp)\n",
    "            theta = theta - (alpha/m) * temp\n",
    "            self.costs.append(np.sum((np.dot(X, theta) - y) ** 2) / (2*m))\n",
    "        self.costs = np.array(self.costs)\n",
    "        plt.plot(list(range(iters)), self.costs)\n",
    "        return theta\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Read Data\n",
    "data = pd.read_csv('ex1data2.txt', sep = ',', header = None)\n",
    "\n",
    "#Read X and y\n",
    "X = data.iloc[:,0:2] \n",
    "y = data.iloc[:,2] \n",
    "m = len(y) # training samples\n",
    "\n",
    "#Convert X and y to rank 2 arrays\n",
    "y = y[:,np.newaxis]\n",
    "X = np.array(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1077,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1009,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[340412.65957447],\n",
       "       [109447.79646964],\n",
       "       [ -6578.35485416]])"
      ]
     },
     "execution_count": 1009,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.normal(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1005,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[340398.69449058],\n",
       "       [108749.51089445],\n",
       "       [ -5880.08275303]])"
      ]
     },
     "execution_count": 1005,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.gradient_descent(X, y, 0.02, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1006,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[338147.56443382],\n",
       "       [103015.9347326 ],\n",
       "       [  -187.37970392]])"
      ]
     },
     "execution_count": 1006,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr.plot_gradient(X, y, 0.005, 1000)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
